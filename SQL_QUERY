ALTER PROCEDURE CreateNewTableFromExisting
	@oldserver NVARCHAR(100),
	@oldDatabase NVARCHAR(100),
	@oldschema NVARCHAR(100),
	@oldtable NVARCHAR(100),
	@newserver NVARCHAR(100),
	@newDatabase NVARCHAR(100),
	@newschema NVARCHAR(100),
	@newtable NVARCHAR(100)
  
AS
BEGIN
	Declare @Create_Query nvarchar(max);
    DECLARE @Drop_Query NVARCHAR(MAX);
	DECLARE @ConstraintList NVARCHAR(MAX);
	Declare  @sql_insert NVARCHAR(MAX);
	
    SET @Create_Query = N'CREATE TABLE ' + @newtable + ' (';
  

    -- Drop the table if it exists
    PRINT 'Dropping existing table if it exists...';
	SET @Drop_Query = N'DROP TABLE IF EXISTS ' +@newtable;
	EXEC sp_executesql @Drop_Query;
	PRINT 'Table dropped successfully.';
    
    -- Dynamically retrieve column information and construct the CREATE TABLE statement
    
   

-- Constructing column list
DECLARE @ColumnList NVARCHAR(MAX);

SELECT @ColumnList = COALESCE(@ColumnList + ',', '') +
       COLUMN_NAME + ' ' + 
       CASE 
          WHEN DATA_TYPE IN ('nvarchar', 'varchar', 'char', 'nchar','varbinary') THEN DATA_TYPE + '(' + 
               CASE WHEN CHARACTER_MAXIMUM_LENGTH = -1 THEN 'max' ELSE CAST(CHARACTER_MAXIMUM_LENGTH AS VARCHAR(10)) END + ')'
          WHEN DATA_TYPE = 'numeric' THEN DATA_TYPE + '(' + CAST(NUMERIC_PRECISION AS VARCHAR(10)) + ',' + CAST(NUMERIC_SCALE AS VARCHAR(10)) + ')'
          ELSE DATA_TYPE 
       END
FROM maxprod_stage.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = @oldtable;

-- Constructing constraints


SELECT @ConstraintList = COALESCE(@ConstraintList + ',', '') +
   CASE WHEN tc.CONSTRAINT_TYPE = 'PRIMARY KEY' THEN 'CONSTRAINT ' + tc.CONSTRAINT_NAME + ' PRIMARY KEY (' + ccu.COLUMN_NAME + ')'
        WHEN tc.CONSTRAINT_TYPE = 'UNIQUE' THEN 'CONSTRAINT ' + tc.CONSTRAINT_NAME + ' UNIQUE (' + ccu.COLUMN_NAME + ')'
        WHEN tc.CONSTRAINT_TYPE = 'FOREIGN KEY' THEN 'CONSTRAINT ' + tc.CONSTRAINT_NAME + ' FOREIGN KEY (' + ccu.COLUMN_NAME + ') REFERENCES ' + kcu.TABLE_NAME + '(' + kcu.COLUMN_NAME + ')'
        ELSE '' END
FROM maxprod_stage.INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
INNER JOIN maxprod_stage.INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ccu ON tc.CONSTRAINT_NAME = ccu.CONSTRAINT_NAME
INNER JOIN maxprod_stage.INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu ON kcu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME
WHERE tc.TABLE_NAME = @oldtable;

-- Constructing the final CREATE TABLE statement
SET @Create_Query = 'CREATE TABLE ' + @newtable + ' (' + 
                    ISNULL(@ColumnList, '') + 
                    ISNULL(@ConstraintList, '') + 
                    ')';



    SET @Create_Query = LEFT(@Create_Query, LEN(@Create_Query) - 1) + ')';

    -- Print the generated CREATE TABLE SQL for debugging
    PRINT 'Generated CREATE TABLE SQL:';
    print @Create_Query;

    -- Execute the CREATE TABLE statement
    PRINT 'Executing CREATE TABLE statement...';
    EXEC sp_executesql @Create_Query;
    PRINT 'CREATE TABLE statement executed successfully.';

    -- Construct and execute the INSERT INTO statement
    SET @sql_insert = 
        'INSERT INTO '+ @newserver + '.'+ @newDatabase + '.' + @Newschema + '.' + @newtable +
        ' SELECT * FROM '+ @oldserver +'.' + @oldDatabase + '.' + @oldschema + '.' + @oldtable;
	
    PRINT 'Executing INSERT INTO statement...';
    EXEC sp_executesql @sql_insert;
    PRINT 'INSERT INTO statement executed successfully.';
    
    PRINT 'Complete';
END;

